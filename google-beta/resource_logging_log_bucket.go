// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
  "github.com/hashicorp/terraform-plugin-sdk/v2/helper/acctest"
  "github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
  "github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
  "github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
  "github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
  "github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
  "github.com/hashicorp/terraform-plugin-sdk/v2/terraform"
  "github.com/hashicorp/terraform-plugin-sdk/v2/diag"
  "github.com/hashicorp/terraform-plugin-sdk/v2/helper/logging"
)




func resourceLoggingLogBucket() *schema.Resource {
    return &schema.Resource{
        Create: resourceLoggingLogBucketCreate,
        Read: resourceLoggingLogBucketRead,
        Update: resourceLoggingLogBucketUpdate,
        Delete: resourceLoggingLogBucketDelete,

        Importer: &schema.ResourceImporter{
            State: resourceLoggingLogBucketImport,
        },

        Timeouts: &schema.ResourceTimeout {
            Create: schema.DefaultTimeout(20 * time.Minute),
            Update: schema.DefaultTimeout(20 * time.Minute),
            Delete: schema.DefaultTimeout(20 * time.Minute),
        },



        Schema: map[string]*schema.Schema{
"cmek_settings": {
    Type: schema.TypeList,
    Optional: true,
	Description: `The CMEK settings of the log bucket. If present, new log entries written to this log
bucket are encrypted using the CMEK key provided in this configuration. If a log bucke
has CMEK settings, the CMEK settings cannot be disabled later by updating the log bucket.
Changing the KMS key is allowed.`,
    MaxItems: 1,
    Elem: &schema.Resource{
    Schema: map[string]*schema.Schema{
              "name": {
    Type: schema.TypeString,
    Required: true,
	Description: `Output only. The resource name of the CMEK settings.`,
},
              "kms_key_name": {
    Type: schema.TypeString,
    Optional: true,
	Description: `The resource name for the configured Cloud KMS key. KMS key name format:
"projects/[PROJECT_ID]/locations/[LOCATION]/keyRings/[KEYRING]/cryptoKeys/[KEY]"
To enable CMEK for the Log Router, set this field to a valid kmsKeyName for which 
the associated service account has the required cloudkms.cryptoKeyEncrypterDecrypter 
roles assigned for the key. The Cloud KMS key used by the Log Router can be updated 
by changing the kmsKeyName to a new valid key name or disabled by setting the key name 
to an empty string. Encryption operations that are in progress will be completed 
with the key that was in use when they started. Decryption operations will be completed 
using the key that was used at the time of encryption unless access to that key has been
revoked. To disable CMEK for the Log Router, set this field to an empty string.`,
},
              "kms_key_version_name": {
    Type: schema.TypeString,
    Optional: true,
	Description: `Output only. The timestamp when the index was last modified. This is used to return the 
timestamp, and will be ignored if supplied during update. A timestamp in RFC3339 UTC "Zulu" 
format, with nanosecond resolution and up to nine fractional digits. 
Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".`,
},
              "service_account_id": {
    Type: schema.TypeString,
    Optional: true,
	Description: `Output only. The service account that will be used by the Log Router to access your 
Cloud KMS key. Before enabling CMEK for Log Router, you must first assign the 
cloudkms.cryptoKeyEncrypterDecrypter role to the service account that the Log Router 
will use to access your Cloud KMS key. Use v2.getCmekSettings to obtain the service account ID.`,
},
          },
  },
},
"create_time": {
    Type: schema.TypeString,
    Optional: true,
	Description: `Output only. The creation timestamp of the bucket. This is not set for any of 
the default buckets. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
resolution and up to nine fractional digits. 
Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".`,
},
"description": {
    Type: schema.TypeString,
    Optional: true,
	Description: `Describes this bucket.`,
},
"index_configs[]": {
    Type: schema.TypeList,
    Optional: true,
	Description: `A list of indexed fields and related configuration data.`,
    MaxItems: 1,
    Elem: &schema.Resource{
    Schema: map[string]*schema.Schema{
              "field_path": {
    Type: schema.TypeString,
    Required: true,
	Description: `The LogEntry field path to index. Note that some paths are automatically indexed, and 
other paths are not eligible for indexing.`,
},
              "type": {
    Type: schema.TypeString,
    Required: true,
	ValidateFunc: validateEnum([]string{"INDEX_TYPE_STRING","INDEX_TYPE_INTEGER"}),
	Description: `The type of data in this index. Possible values: ["INDEX_TYPE_STRING", "INDEX_TYPE_INTEGER"]`,
},
              "create_time": {
    Type: schema.TypeString,
    Optional: true,
	Description: `Output only. The timestamp when the index was last modified. This is used to return the 
timestamp, and will be ignored if supplied during update. A timestamp in RFC3339 UTC "Zulu" 
format, with nanosecond resolution and up to nine fractional digits. 
Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".`,
},
          },
  },
},
"lifecycle_state": {
    Type: schema.TypeString,
    Optional: true,
	ValidateFunc: validateEnum([]string{"ACTIVE","DELETE_REQUESTED",""}),
	Description: `Output only. The bucket lifecycle state. Possible values: ["ACTIVE", "DELETE_REQUESTED"]`,
},
"locked": {
    Type: schema.TypeBool,
    Optional: true,
	Description: `Whether the bucket is locked. The retention period on a locked bucket cannot be changed. 
Locked buckets may only be deleted if they are empty.`,
},
"name": {
    Type: schema.TypeString,
    Optional: true,
	Description: `Output only. The resource name of the bucket. For the location of global
it is unspecified where log entries are actually stored. After a bucket has
been created, the location cannot be changed.`,
},
"restricted_fields[]": {
    Type: schema.TypeString,
    Optional: true,
	Description: `Log entry field paths that are denied access in this bucket. The following fields and their 
children are eligible: textPayload, jsonPayload, protoPayload, httpRequest, labels, sourceLocation.
Restricting a repeated field will restrict all values. Adding a parent will block all child fields.
(e.g. foo.bar will block foo.bar.baz)`,
},
"retention_days": {
    Type: schema.TypeInt,
    Optional: true,
	Description: `Logs will be retained by default for this amount of time, after which they will automatically 
be deleted. The minimum retention period is 1 day. If this value is set to zero at bucket 
creation time, the default time of 30 days will be used.`,
},
"update_time": {
    Type: schema.TypeString,
    Optional: true,
	Description: `Output only. The last update timestamp of the bucket. A timestamp in RFC3339 UTC "Zulu" 
format, with nanosecond resolution and up to nine fractional digits. 
Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z"`,
},
            "project": {
                Type:     schema.TypeString,
                Optional: true,
                Computed: true,
                ForceNew: true,
            },
        },
        UseJSONNumber: true,
    }
}



func resourceLoggingLogBucketCreate(d *schema.ResourceData, meta interface{}) error {
    config := meta.(*Config)
    userAgent, err := generateUserAgentString(d, config.userAgent)
    if err != nil {
        return err
    }

    obj := make(map[string]interface{})
        nameProp, err := expandLoggingLogBucketName(d.Get( "name" ), d, config)
    if err != nil {
        return err
    } else if v, ok := d.GetOkExists("name"); !isEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
        obj["name"] = nameProp
    }
        descriptionProp, err := expandLoggingLogBucketDescription(d.Get( "description" ), d, config)
    if err != nil {
        return err
    } else if v, ok := d.GetOkExists("description"); !isEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
        obj["description"] = descriptionProp
    }
        createTimeProp, err := expandLoggingLogBucketCreateTime(d.Get( "create_time" ), d, config)
    if err != nil {
        return err
    } else if v, ok := d.GetOkExists("create_time"); !isEmptyValue(reflect.ValueOf(createTimeProp)) && (ok || !reflect.DeepEqual(v, createTimeProp)) {
        obj["createTime"] = createTimeProp
    }
        updateTimeProp, err := expandLoggingLogBucketUpdateTime(d.Get( "update_time" ), d, config)
    if err != nil {
        return err
    } else if v, ok := d.GetOkExists("update_time"); !isEmptyValue(reflect.ValueOf(updateTimeProp)) && (ok || !reflect.DeepEqual(v, updateTimeProp)) {
        obj["updateTime"] = updateTimeProp
    }
        retentionDaysProp, err := expandLoggingLogBucketRetentionDays(d.Get( "retention_days" ), d, config)
    if err != nil {
        return err
    } else if v, ok := d.GetOkExists("retention_days"); !isEmptyValue(reflect.ValueOf(retentionDaysProp)) && (ok || !reflect.DeepEqual(v, retentionDaysProp)) {
        obj["retentionDays"] = retentionDaysProp
    }
        lockedProp, err := expandLoggingLogBucketLocked(d.Get( "locked" ), d, config)
    if err != nil {
        return err
    } else if v, ok := d.GetOkExists("locked"); !isEmptyValue(reflect.ValueOf(lockedProp)) && (ok || !reflect.DeepEqual(v, lockedProp)) {
        obj["locked"] = lockedProp
    }
        lifecycleStateProp, err := expandLoggingLogBucketLifecycleState(d.Get( "lifecycle_state" ), d, config)
    if err != nil {
        return err
    } else if v, ok := d.GetOkExists("lifecycle_state"); !isEmptyValue(reflect.ValueOf(lifecycleStateProp)) && (ok || !reflect.DeepEqual(v, lifecycleStateProp)) {
        obj["lifecycleState"] = lifecycleStateProp
    }
        restrictedFields[]Prop, err := expandLoggingLogBucketRestrictedFields[](d.Get( "restricted_fields[]" ), d, config)
    if err != nil {
        return err
    } else if v, ok := d.GetOkExists("restricted_fields[]"); !isEmptyValue(reflect.ValueOf(restrictedFields[]Prop)) && (ok || !reflect.DeepEqual(v, restrictedFields[]Prop)) {
        obj["restrictedFields[]"] = restrictedFields[]Prop
    }
        indexConfigs[]Prop, err := expandLoggingLogBucketIndexConfigs[](d.Get( "index_configs[]" ), d, config)
    if err != nil {
        return err
    } else if v, ok := d.GetOkExists("index_configs[]"); !isEmptyValue(reflect.ValueOf(indexConfigs[]Prop)) && (ok || !reflect.DeepEqual(v, indexConfigs[]Prop)) {
        obj["indexConfigs[]"] = indexConfigs[]Prop
    }
        cmekSettingsProp, err := expandLoggingLogBucketCmekSettings(d.Get( "cmek_settings" ), d, config)
    if err != nil {
        return err
    } else if v, ok := d.GetOkExists("cmek_settings"); !isEmptyValue(reflect.ValueOf(cmekSettingsProp)) && (ok || !reflect.DeepEqual(v, cmekSettingsProp)) {
        obj["cmekSettings"] = cmekSettingsProp
    }



    url, err := replaceVars(d, config, "{{LoggingBasePath}}projects/{{project}}/locations/buckets")
    if err != nil {
        return err
    }

    log.Printf("[DEBUG] Creating new LogBucket: %#v", obj)
    billingProject := ""

    project, err := getProject(d, config)
    if err != nil {
        return fmt.Errorf("Error fetching project for LogBucket: %s", err)
    }
    billingProject = project


    // err == nil indicates that the billing_project value was found
    if bp, err := getBillingProject(d, config); err == nil {
      billingProject = bp
    }

    res, err := sendRequestWithTimeout(config, "POST", billingProject, url, userAgent, obj, d.Timeout(schema.TimeoutCreate))
    if err != nil {
        return fmt.Errorf("Error creating LogBucket: %s", err)
    }
                                                                                                                            
    // Store the ID now
    id, err := replaceVars(d, config, "projects/{{project}}/locations/buckets/{{bucketId}}")
    if err != nil {
        return fmt.Errorf("Error constructing id: %s", err)
    }
    d.SetId(id)




    log.Printf("[DEBUG] Finished creating LogBucket %q: %#v", d.Id(), res)

    return resourceLoggingLogBucketRead(d, meta)
}


func resourceLoggingLogBucketRead(d *schema.ResourceData, meta interface{}) error {
    config := meta.(*Config)
    userAgent, err := generateUserAgentString(d, config.userAgent)
    if err != nil {
        return err
    }

    url, err := replaceVars(d, config, "{{LoggingBasePath}}projects/{{project}}/locations/buckets/{{bucketId}}")
    if err != nil {
        return err
    }

    billingProject := ""

    project, err := getProject(d, config)
    if err != nil {
        return fmt.Errorf("Error fetching project for LogBucket: %s", err)
    }
    billingProject = project


    // err == nil indicates that the billing_project value was found
    if bp, err := getBillingProject(d, config); err == nil {
      billingProject = bp
    }

        res, err := sendRequest(config, "GET", billingProject, url, userAgent, nil)
    if err != nil {
        return handleNotFoundError(err, d, fmt.Sprintf("LoggingLogBucket %q", d.Id()))
    }


    if err := d.Set("project", project); err != nil {
        return fmt.Errorf("Error reading LogBucket: %s", err)
    }


    if err := d.Set("name", flattenLoggingLogBucketName(res["name"], d, config)); err != nil {
        return fmt.Errorf("Error reading LogBucket: %s", err)
    }
    if err := d.Set("description", flattenLoggingLogBucketDescription(res["description"], d, config)); err != nil {
        return fmt.Errorf("Error reading LogBucket: %s", err)
    }
    if err := d.Set("create_time", flattenLoggingLogBucketCreateTime(res["createTime"], d, config)); err != nil {
        return fmt.Errorf("Error reading LogBucket: %s", err)
    }
    if err := d.Set("update_time", flattenLoggingLogBucketUpdateTime(res["updateTime"], d, config)); err != nil {
        return fmt.Errorf("Error reading LogBucket: %s", err)
    }
    if err := d.Set("retention_days", flattenLoggingLogBucketRetentionDays(res["retentionDays"], d, config)); err != nil {
        return fmt.Errorf("Error reading LogBucket: %s", err)
    }
    if err := d.Set("locked", flattenLoggingLogBucketLocked(res["locked"], d, config)); err != nil {
        return fmt.Errorf("Error reading LogBucket: %s", err)
    }
    if err := d.Set("lifecycle_state", flattenLoggingLogBucketLifecycleState(res["lifecycleState"], d, config)); err != nil {
        return fmt.Errorf("Error reading LogBucket: %s", err)
    }
    if err := d.Set("restricted_fields[]", flattenLoggingLogBucketRestrictedFields[](res["restrictedFields[]"], d, config)); err != nil {
        return fmt.Errorf("Error reading LogBucket: %s", err)
    }
    if err := d.Set("index_configs[]", flattenLoggingLogBucketIndexConfigs[](res["indexConfigs[]"], d, config)); err != nil {
        return fmt.Errorf("Error reading LogBucket: %s", err)
    }
    if err := d.Set("cmek_settings", flattenLoggingLogBucketCmekSettings(res["cmekSettings"], d, config)); err != nil {
        return fmt.Errorf("Error reading LogBucket: %s", err)
    }

    return nil
}

func resourceLoggingLogBucketUpdate(d *schema.ResourceData, meta interface{}) error {
    config := meta.(*Config)
    userAgent, err := generateUserAgentString(d, config.userAgent)
    if err != nil {
    	return err
    }

    billingProject := ""

    project, err := getProject(d, config)
    if err != nil {
        return fmt.Errorf("Error fetching project for LogBucket: %s", err)
    }
    billingProject = project


    obj := make(map[string]interface{})
            nameProp, err := expandLoggingLogBucketName(d.Get( "name" ), d, config)
    if err != nil {
        return err
    } else if v, ok := d.GetOkExists("name"); !isEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, nameProp)) {
        obj["name"] = nameProp
    }
            descriptionProp, err := expandLoggingLogBucketDescription(d.Get( "description" ), d, config)
    if err != nil {
        return err
    } else if v, ok := d.GetOkExists("description"); !isEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
        obj["description"] = descriptionProp
    }
            createTimeProp, err := expandLoggingLogBucketCreateTime(d.Get( "create_time" ), d, config)
    if err != nil {
        return err
    } else if v, ok := d.GetOkExists("create_time"); !isEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, createTimeProp)) {
        obj["createTime"] = createTimeProp
    }
            updateTimeProp, err := expandLoggingLogBucketUpdateTime(d.Get( "update_time" ), d, config)
    if err != nil {
        return err
    } else if v, ok := d.GetOkExists("update_time"); !isEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, updateTimeProp)) {
        obj["updateTime"] = updateTimeProp
    }
            retentionDaysProp, err := expandLoggingLogBucketRetentionDays(d.Get( "retention_days" ), d, config)
    if err != nil {
        return err
    } else if v, ok := d.GetOkExists("retention_days"); !isEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, retentionDaysProp)) {
        obj["retentionDays"] = retentionDaysProp
    }
            lockedProp, err := expandLoggingLogBucketLocked(d.Get( "locked" ), d, config)
    if err != nil {
        return err
    } else if v, ok := d.GetOkExists("locked"); !isEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, lockedProp)) {
        obj["locked"] = lockedProp
    }
            lifecycleStateProp, err := expandLoggingLogBucketLifecycleState(d.Get( "lifecycle_state" ), d, config)
    if err != nil {
        return err
    } else if v, ok := d.GetOkExists("lifecycle_state"); !isEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, lifecycleStateProp)) {
        obj["lifecycleState"] = lifecycleStateProp
    }
            restrictedFields[]Prop, err := expandLoggingLogBucketRestrictedFields[](d.Get( "restricted_fields[]" ), d, config)
    if err != nil {
        return err
    } else if v, ok := d.GetOkExists("restricted_fields[]"); !isEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, restrictedFields[]Prop)) {
        obj["restrictedFields[]"] = restrictedFields[]Prop
    }
            indexConfigs[]Prop, err := expandLoggingLogBucketIndexConfigs[](d.Get( "index_configs[]" ), d, config)
    if err != nil {
        return err
    } else if v, ok := d.GetOkExists("index_configs[]"); !isEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, indexConfigs[]Prop)) {
        obj["indexConfigs[]"] = indexConfigs[]Prop
    }
            cmekSettingsProp, err := expandLoggingLogBucketCmekSettings(d.Get( "cmek_settings" ), d, config)
    if err != nil {
        return err
    } else if v, ok := d.GetOkExists("cmek_settings"); !isEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, cmekSettingsProp)) {
        obj["cmekSettings"] = cmekSettingsProp
    }



    url, err := replaceVars(d, config, "{{LoggingBasePath}}projects/{{project}}/locations/buckets/{{bucketId}}")
    if err != nil {
        return err
    }

    log.Printf("[DEBUG] Updating LogBucket %q: %#v", d.Id(), obj)

    // err == nil indicates that the billing_project value was found
    if bp, err := getBillingProject(d, config); err == nil {
      billingProject = bp
    }

    res, err := sendRequestWithTimeout(config, "PUT", billingProject, url, userAgent, obj, d.Timeout(schema.TimeoutUpdate))

    if err != nil {
        return fmt.Errorf("Error updating LogBucket %q: %s", d.Id(), err)
    } else {
	log.Printf("[DEBUG] Finished updating LogBucket %q: %#v", d.Id(), res)
    }


    return resourceLoggingLogBucketRead(d, meta)
}

func resourceLoggingLogBucketDelete(d *schema.ResourceData, meta interface{}) error {
    config := meta.(*Config)
    userAgent, err := generateUserAgentString(d, config.userAgent)
    if err != nil {
    	return err
    }


    billingProject := ""

    project, err := getProject(d, config)
    if err != nil {
        return fmt.Errorf("Error fetching project for LogBucket: %s", err)
    }
    billingProject = project


    url, err := replaceVars(d, config, "{{LoggingBasePath}}projects/{{project}}/locations/buckets/{{bucketId}}")
    if err != nil {
        return err
    }

    var obj map[string]interface{}
    log.Printf("[DEBUG] Deleting LogBucket %q", d.Id())

    // err == nil indicates that the billing_project value was found
    if bp, err := getBillingProject(d, config); err == nil {
      billingProject = bp
    }

    res, err := sendRequestWithTimeout(config, "DELETE", billingProject, url, userAgent, obj, d.Timeout(schema.TimeoutDelete))
    if err != nil {
        return handleNotFoundError(err, d, "LogBucket")
    }


    log.Printf("[DEBUG] Finished deleting LogBucket %q: %#v", d.Id(), res)
    return nil
}

func resourceLoggingLogBucketImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
    config := meta.(*Config)
    if err := parseImportId([]string{
        "projects/(?P<project>[^/]+)/locations/buckets/(?P<name>[^/]+)",
        "(?P<project>[^/]+)/(?P<name>[^/]+)",
        "(?P<name>[^/]+)",
    }, d, config); err != nil {
      return nil, err
    }

    // Replace import id for the resource id
    id, err := replaceVars(d, config, "projects/{{project}}/locations/buckets/{{bucketId}}")
    if err != nil {
        return nil, fmt.Errorf("Error constructing id: %s", err)
    }
    d.SetId(id)


    return []*schema.ResourceData{d}, nil
}

func flattenLoggingLogBucketName(v interface{}, d *schema.ResourceData, config *Config) interface{} {
  return v
}

func flattenLoggingLogBucketDescription(v interface{}, d *schema.ResourceData, config *Config) interface{} {
  return v
}

func flattenLoggingLogBucketCreateTime(v interface{}, d *schema.ResourceData, config *Config) interface{} {
  return v
}

func flattenLoggingLogBucketUpdateTime(v interface{}, d *schema.ResourceData, config *Config) interface{} {
  return v
}

func flattenLoggingLogBucketRetentionDays(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := stringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenLoggingLogBucketLocked(v interface{}, d *schema.ResourceData, config *Config) interface{} {
  return v
}

func flattenLoggingLogBucketLifecycleState(v interface{}, d *schema.ResourceData, config *Config) interface{} {
  return v
}

func flattenLoggingLogBucketRestrictedFields[](v interface{}, d *schema.ResourceData, config *Config) interface{} {
  return v
}

func flattenLoggingLogBucketIndexConfigs[](v interface{}, d *schema.ResourceData, config *Config) interface{} {
  if v == nil {
    return nil
  }
  original := v.(map[string]interface{})
    if len(original) == 0 {
    return nil
  }
    transformed := make(map[string]interface{})
          transformed["field_path"] =
    flattenLoggingLogBucketIndexConfigs[]FieldPath(original["fieldPath"], d, config)
              transformed["type"] =
    flattenLoggingLogBucketIndexConfigs[]Type(original["type"], d, config)
              transformed["create_time"] =
    flattenLoggingLogBucketIndexConfigs[]CreateTime(original["createTime"], d, config)
        return []interface{}{transformed}
}
      func flattenLoggingLogBucketIndexConfigs[]FieldPath(v interface{}, d *schema.ResourceData, config *Config) interface{} {
  return v
}

      func flattenLoggingLogBucketIndexConfigs[]Type(v interface{}, d *schema.ResourceData, config *Config) interface{} {
  return v
}

      func flattenLoggingLogBucketIndexConfigs[]CreateTime(v interface{}, d *schema.ResourceData, config *Config) interface{} {
  return v
}

  

func flattenLoggingLogBucketCmekSettings(v interface{}, d *schema.ResourceData, config *Config) interface{} {
  if v == nil {
    return nil
  }
  original := v.(map[string]interface{})
    if len(original) == 0 {
    return nil
  }
    transformed := make(map[string]interface{})
          transformed["name"] =
    flattenLoggingLogBucketCmekSettingsName(original["name"], d, config)
              transformed["kms_key_name"] =
    flattenLoggingLogBucketCmekSettingsKmsKeyName(original["kmsKeyName"], d, config)
              transformed["kms_key_version_name"] =
    flattenLoggingLogBucketCmekSettingsKmsKeyVersionName(original["kmsKeyVersionName"], d, config)
              transformed["service_account_id"] =
    flattenLoggingLogBucketCmekSettingsServiceAccountId(original["serviceAccountId"], d, config)
        return []interface{}{transformed}
}
      func flattenLoggingLogBucketCmekSettingsName(v interface{}, d *schema.ResourceData, config *Config) interface{} {
  return v
}

      func flattenLoggingLogBucketCmekSettingsKmsKeyName(v interface{}, d *schema.ResourceData, config *Config) interface{} {
  return v
}

      func flattenLoggingLogBucketCmekSettingsKmsKeyVersionName(v interface{}, d *schema.ResourceData, config *Config) interface{} {
  return v
}

      func flattenLoggingLogBucketCmekSettingsServiceAccountId(v interface{}, d *schema.ResourceData, config *Config) interface{} {
  return v
}

  




func expandLoggingLogBucketName(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
  return v, nil
}



func expandLoggingLogBucketDescription(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
  return v, nil
}



func expandLoggingLogBucketCreateTime(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
  return v, nil
}



func expandLoggingLogBucketUpdateTime(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
  return v, nil
}



func expandLoggingLogBucketRetentionDays(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
  return v, nil
}



func expandLoggingLogBucketLocked(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
  return v, nil
}



func expandLoggingLogBucketLifecycleState(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
  return v, nil
}



func expandLoggingLogBucketRestrictedFields[](v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
  return v, nil
}



func expandLoggingLogBucketIndexConfigs[](v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
  l := v.([]interface{})
  if len(l) == 0 || l[0] == nil {
    return nil, nil
  }
  raw := l[0]
    original := raw.(map[string]interface{})
    transformed := make(map[string]interface{})

      transformedFieldPath, err := expandLoggingLogBucketIndexConfigs[]FieldPath(original["field_path"], d, config)
      if err != nil {
        return nil, err
      } else if val := reflect.ValueOf(transformedFieldPath); val.IsValid() && !isEmptyValue(val) {
        transformed["fieldPath"] = transformedFieldPath      }

      transformedType, err := expandLoggingLogBucketIndexConfigs[]Type(original["type"], d, config)
      if err != nil {
        return nil, err
      } else if val := reflect.ValueOf(transformedType); val.IsValid() && !isEmptyValue(val) {
        transformed["type"] = transformedType      }

      transformedCreateTime, err := expandLoggingLogBucketIndexConfigs[]CreateTime(original["create_time"], d, config)
      if err != nil {
        return nil, err
      } else if val := reflect.ValueOf(transformedCreateTime); val.IsValid() && !isEmptyValue(val) {
        transformed["createTime"] = transformedCreateTime      }

  return transformed, nil
}






func expandLoggingLogBucketIndexConfigs[]FieldPath(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
  return v, nil
}




func expandLoggingLogBucketIndexConfigs[]Type(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
  return v, nil
}




func expandLoggingLogBucketIndexConfigs[]CreateTime(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
  return v, nil
}



func expandLoggingLogBucketCmekSettings(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
  l := v.([]interface{})
  if len(l) == 0 || l[0] == nil {
    return nil, nil
  }
  raw := l[0]
    original := raw.(map[string]interface{})
    transformed := make(map[string]interface{})

      transformedName, err := expandLoggingLogBucketCmekSettingsName(original["name"], d, config)
      if err != nil {
        return nil, err
      } else if val := reflect.ValueOf(transformedName); val.IsValid() && !isEmptyValue(val) {
        transformed["name"] = transformedName      }

      transformedKmsKeyName, err := expandLoggingLogBucketCmekSettingsKmsKeyName(original["kms_key_name"], d, config)
      if err != nil {
        return nil, err
      } else if val := reflect.ValueOf(transformedKmsKeyName); val.IsValid() && !isEmptyValue(val) {
        transformed["kmsKeyName"] = transformedKmsKeyName      }

      transformedKmsKeyVersionName, err := expandLoggingLogBucketCmekSettingsKmsKeyVersionName(original["kms_key_version_name"], d, config)
      if err != nil {
        return nil, err
      } else if val := reflect.ValueOf(transformedKmsKeyVersionName); val.IsValid() && !isEmptyValue(val) {
        transformed["kmsKeyVersionName"] = transformedKmsKeyVersionName      }

      transformedServiceAccountId, err := expandLoggingLogBucketCmekSettingsServiceAccountId(original["service_account_id"], d, config)
      if err != nil {
        return nil, err
      } else if val := reflect.ValueOf(transformedServiceAccountId); val.IsValid() && !isEmptyValue(val) {
        transformed["serviceAccountId"] = transformedServiceAccountId      }

  return transformed, nil
}






func expandLoggingLogBucketCmekSettingsName(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
  return v, nil
}




func expandLoggingLogBucketCmekSettingsKmsKeyName(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
  return v, nil
}




func expandLoggingLogBucketCmekSettingsKmsKeyVersionName(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
  return v, nil
}




func expandLoggingLogBucketCmekSettingsServiceAccountId(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
  return v, nil
}
